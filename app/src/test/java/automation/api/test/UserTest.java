/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package automation.api.test;

import automation.api.domain.User;
import org.apache.http.HttpStatus;
import org.junit.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class UserTest extends BaseTest {

    private static final String LIST_USER_ENDPOINT = "/users";
    private static final String CREATE_USER_ENDPOINT = "/users";
    private static final String GET_SINGLE_USER_ENDPOINT = "/users/{userId}";


    @Test public void testListUserData() {
        given().
                params("page", "2").
        when().
                get(LIST_USER_ENDPOINT).
        then().
                statusCode(HttpStatus.SC_OK).
                body("page", is(2)).
                body("data", is(notNullValue()));
    }

    @Test public void testCreateUser() {
        User user = new User();
        user.setName("morpheus");
        user.setJob("leader");
        given().
               body(user).
        when().
                post(CREATE_USER_ENDPOINT).
        then().
                statusCode(HttpStatus.SC_CREATED).
                body("name", is("morpheus"));

    }

    @Test public void testCheckPerPageSize() {
        int page = 2;
        int expectedPerPage = getExpectedPerPage(page);

        given().
                params("page", page).
        when().
                get(LIST_USER_ENDPOINT).
        then().
                statusCode(HttpStatus.SC_OK).
                body(
                        "page", is(2),
                        "data.size()", is(expectedPerPage),
                        "data.findAll { it.avatar.startsWith('https://reqres.in') }.size()", is(expectedPerPage)
                );

    }

    @Test public void getSingleUser() {
        User user = given().
                pathParam("userId", 2).
        when().
                get(GET_SINGLE_USER_ENDPOINT).
        then().
                statusCode(HttpStatus.SC_OK).
        extract().
                body().jsonPath().getObject("data", User.class);

        assertThat(user.getEmail(), containsString("reqres.in"));
        assertThat(user.getName(), is("Janet"));
        assertThat(user.getLastName(), is("Weaver"));

    }


    private int getExpectedPerPage(int page) {
        int expectedPerPage = given().
                    params("page", page).
                when().
                    get(LIST_USER_ENDPOINT).
                then().
                    statusCode(HttpStatus.SC_OK).
                extract().
                    path("per_page");
        return expectedPerPage;
    }

}
